/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/oidc-token-hash";
exports.ids = ["vendor-chunks/oidc-token-hash"];
exports.modules = {

/***/ "(rsc)/./node_modules/oidc-token-hash/lib/index.js":
/*!***************************************************!*\
  !*** ./node_modules/oidc-token-hash/lib/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const { strict: assert } = __webpack_require__(/*! assert */ \"assert\");\nconst { createHash } = __webpack_require__(/*! crypto */ \"crypto\");\nconst { format } = __webpack_require__(/*! util */ \"util\");\nconst shake256 = __webpack_require__(/*! ./shake256 */ \"(rsc)/./node_modules/oidc-token-hash/lib/shake256.js\");\nlet encode;\nif (Buffer.isEncoding(\"base64url\")) {\n    encode = (input)=>input.toString(\"base64url\");\n} else {\n    const fromBase64 = (base64)=>base64.replace(/=/g, \"\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n    encode = (input)=>fromBase64(input.toString(\"base64\"));\n}\n/** SPECIFICATION\r\n * Its (_hash) value is the base64url encoding of the left-most half of the hash of the octets of\r\n * the ASCII representation of the token value, where the hash algorithm used is the hash algorithm\r\n * used in the alg Header Parameter of the ID Token's JOSE Header. For instance, if the alg is\r\n * RS256, hash the token value with SHA-256, then take the left-most 128 bits and base64url encode\r\n * them. The _hash value is a case sensitive string.\r\n */ /**\r\n * @name getHash\r\n * @api private\r\n *\r\n * returns the sha length based off the JOSE alg heade value, defaults to sha256\r\n *\r\n * @param token {String} token value to generate the hash from\r\n * @param alg {String} ID Token JOSE header alg value (i.e. RS256, HS384, ES512, PS256)\r\n * @param [crv] {String} For EdDSA the curve decides what hash algorithm is used. Required for EdDSA\r\n */ function getHash(alg, crv) {\n    switch(alg){\n        case \"HS256\":\n        case \"RS256\":\n        case \"PS256\":\n        case \"ES256\":\n        case \"ES256K\":\n            return createHash(\"sha256\");\n        case \"HS384\":\n        case \"RS384\":\n        case \"PS384\":\n        case \"ES384\":\n            return createHash(\"sha384\");\n        case \"HS512\":\n        case \"RS512\":\n        case \"PS512\":\n        case \"ES512\":\n            return createHash(\"sha512\");\n        case \"EdDSA\":\n            switch(crv){\n                case \"Ed25519\":\n                    return createHash(\"sha512\");\n                case \"Ed448\":\n                    if (!shake256) {\n                        throw new TypeError(\"Ed448 *_hash calculation is not supported in your Node.js runtime version\");\n                    }\n                    return createHash(\"shake256\", {\n                        outputLength: 114\n                    });\n                default:\n                    throw new TypeError(\"unrecognized or invalid EdDSA curve provided\");\n            }\n        default:\n            throw new TypeError(\"unrecognized or invalid JWS algorithm provided\");\n    }\n}\nfunction generate(token, alg, crv) {\n    const digest = getHash(alg, crv).update(token).digest();\n    return encode(digest.slice(0, digest.length / 2));\n}\nfunction validate(names, actual, source, alg, crv) {\n    if (typeof names.claim !== \"string\" || !names.claim) {\n        throw new TypeError(\"names.claim must be a non-empty string\");\n    }\n    if (typeof names.source !== \"string\" || !names.source) {\n        throw new TypeError(\"names.source must be a non-empty string\");\n    }\n    assert(typeof actual === \"string\" && actual, `${names.claim} must be a non-empty string`);\n    assert(typeof source === \"string\" && source, `${names.source} must be a non-empty string`);\n    let expected;\n    let msg;\n    try {\n        expected = generate(source, alg, crv);\n    } catch (err) {\n        msg = format(\"%s could not be validated (%s)\", names.claim, err.message);\n    }\n    msg = msg || format(\"%s mismatch, expected %s, got: %s\", names.claim, expected, actual);\n    assert.equal(expected, actual, msg);\n}\nmodule.exports = {\n    validate,\n    generate\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb2lkYy10b2tlbi1oYXNoL2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNLEVBQUVBLFFBQVFDLE1BQU0sRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUNuQyxNQUFNLEVBQUVDLFVBQVUsRUFBRSxHQUFHRCxtQkFBT0EsQ0FBQztBQUMvQixNQUFNLEVBQUVFLE1BQU0sRUFBRSxHQUFHRixtQkFBT0EsQ0FBQztBQUUzQixNQUFNRyxXQUFXSCxtQkFBT0EsQ0FBQztBQUV6QixJQUFJSTtBQUNKLElBQUlDLE9BQU9DLFVBQVUsQ0FBQyxjQUFjO0lBQ2xDRixTQUFTLENBQUNHLFFBQVVBLE1BQU1DLFFBQVEsQ0FBQztBQUNyQyxPQUFPO0lBQ0wsTUFBTUMsYUFBYSxDQUFDQyxTQUFXQSxPQUFPQyxPQUFPLENBQUMsTUFBTSxJQUFJQSxPQUFPLENBQUMsT0FBTyxLQUFLQSxPQUFPLENBQUMsT0FBTztJQUMzRlAsU0FBUyxDQUFDRyxRQUFVRSxXQUFXRixNQUFNQyxRQUFRLENBQUM7QUFDaEQ7QUFFQTs7Ozs7O0NBTUMsR0FFRDs7Ozs7Ozs7O0NBU0MsR0FDRCxTQUFTSSxRQUFRQyxHQUFHLEVBQUVDLEdBQUc7SUFDdkIsT0FBUUQ7UUFDTixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9aLFdBQVc7UUFFcEIsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9BLFdBQVc7UUFFcEIsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztZQUNILE9BQU9BLFdBQVc7UUFFcEIsS0FBSztZQUNILE9BQVFhO2dCQUNOLEtBQUs7b0JBQ0gsT0FBT2IsV0FBVztnQkFDcEIsS0FBSztvQkFDSCxJQUFJLENBQUNFLFVBQVU7d0JBQ2IsTUFBTSxJQUFJWSxVQUFVO29CQUN0QjtvQkFFQSxPQUFPZCxXQUFXLFlBQVk7d0JBQUVlLGNBQWM7b0JBQUk7Z0JBQ3BEO29CQUNFLE1BQU0sSUFBSUQsVUFBVTtZQUN4QjtRQUVGO1lBQ0UsTUFBTSxJQUFJQSxVQUFVO0lBQ3hCO0FBQ0Y7QUFFQSxTQUFTRSxTQUFTQyxLQUFLLEVBQUVMLEdBQUcsRUFBRUMsR0FBRztJQUMvQixNQUFNSyxTQUFTUCxRQUFRQyxLQUFLQyxLQUFLTSxNQUFNLENBQUNGLE9BQU9DLE1BQU07SUFDckQsT0FBT2YsT0FBT2UsT0FBT0UsS0FBSyxDQUFDLEdBQUdGLE9BQU9HLE1BQU0sR0FBRztBQUNoRDtBQUVBLFNBQVNDLFNBQVNDLEtBQUssRUFBRUMsTUFBTSxFQUFFQyxNQUFNLEVBQUViLEdBQUcsRUFBRUMsR0FBRztJQUMvQyxJQUFJLE9BQU9VLE1BQU1HLEtBQUssS0FBSyxZQUFZLENBQUNILE1BQU1HLEtBQUssRUFBRTtRQUNuRCxNQUFNLElBQUlaLFVBQVU7SUFDdEI7SUFFQSxJQUFJLE9BQU9TLE1BQU1FLE1BQU0sS0FBSyxZQUFZLENBQUNGLE1BQU1FLE1BQU0sRUFBRTtRQUNyRCxNQUFNLElBQUlYLFVBQVU7SUFDdEI7SUFFQWhCLE9BQU8sT0FBTzBCLFdBQVcsWUFBWUEsUUFBUSxDQUFDLEVBQUVELE1BQU1HLEtBQUssQ0FBQywyQkFBMkIsQ0FBQztJQUN4RjVCLE9BQU8sT0FBTzJCLFdBQVcsWUFBWUEsUUFBUSxDQUFDLEVBQUVGLE1BQU1FLE1BQU0sQ0FBQywyQkFBMkIsQ0FBQztJQUV6RixJQUFJRTtJQUNKLElBQUlDO0lBQ0osSUFBSTtRQUNGRCxXQUFXWCxTQUFTUyxRQUFRYixLQUFLQztJQUNuQyxFQUFFLE9BQU9nQixLQUFLO1FBQ1pELE1BQU0zQixPQUFPLGtDQUFrQ3NCLE1BQU1HLEtBQUssRUFBRUcsSUFBSUMsT0FBTztJQUN6RTtJQUVBRixNQUFNQSxPQUFPM0IsT0FBTyxxQ0FBcUNzQixNQUFNRyxLQUFLLEVBQUVDLFVBQVVIO0lBRWhGMUIsT0FBT2lDLEtBQUssQ0FBQ0osVUFBVUgsUUFBUUk7QUFDakM7QUFFQUksT0FBT0MsT0FBTyxHQUFHO0lBQ2ZYO0lBQ0FOO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9vaWRjLXRva2VuLWhhc2gvbGliL2luZGV4LmpzP2M4MjMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBzdHJpY3Q6IGFzc2VydCB9ID0gcmVxdWlyZSgnYXNzZXJ0Jyk7XHJcbmNvbnN0IHsgY3JlYXRlSGFzaCB9ID0gcmVxdWlyZSgnY3J5cHRvJyk7XHJcbmNvbnN0IHsgZm9ybWF0IH0gPSByZXF1aXJlKCd1dGlsJyk7XHJcblxyXG5jb25zdCBzaGFrZTI1NiA9IHJlcXVpcmUoJy4vc2hha2UyNTYnKTtcclxuXHJcbmxldCBlbmNvZGU7XHJcbmlmIChCdWZmZXIuaXNFbmNvZGluZygnYmFzZTY0dXJsJykpIHtcclxuICBlbmNvZGUgPSAoaW5wdXQpID0+IGlucHV0LnRvU3RyaW5nKCdiYXNlNjR1cmwnKTtcclxufSBlbHNlIHtcclxuICBjb25zdCBmcm9tQmFzZTY0ID0gKGJhc2U2NCkgPT4gYmFzZTY0LnJlcGxhY2UoLz0vZywgJycpLnJlcGxhY2UoL1xcKy9nLCAnLScpLnJlcGxhY2UoL1xcLy9nLCAnXycpO1xyXG4gIGVuY29kZSA9IChpbnB1dCkgPT4gZnJvbUJhc2U2NChpbnB1dC50b1N0cmluZygnYmFzZTY0JykpO1xyXG59XHJcblxyXG4vKiogU1BFQ0lGSUNBVElPTlxyXG4gKiBJdHMgKF9oYXNoKSB2YWx1ZSBpcyB0aGUgYmFzZTY0dXJsIGVuY29kaW5nIG9mIHRoZSBsZWZ0LW1vc3QgaGFsZiBvZiB0aGUgaGFzaCBvZiB0aGUgb2N0ZXRzIG9mXHJcbiAqIHRoZSBBU0NJSSByZXByZXNlbnRhdGlvbiBvZiB0aGUgdG9rZW4gdmFsdWUsIHdoZXJlIHRoZSBoYXNoIGFsZ29yaXRobSB1c2VkIGlzIHRoZSBoYXNoIGFsZ29yaXRobVxyXG4gKiB1c2VkIGluIHRoZSBhbGcgSGVhZGVyIFBhcmFtZXRlciBvZiB0aGUgSUQgVG9rZW4ncyBKT1NFIEhlYWRlci4gRm9yIGluc3RhbmNlLCBpZiB0aGUgYWxnIGlzXHJcbiAqIFJTMjU2LCBoYXNoIHRoZSB0b2tlbiB2YWx1ZSB3aXRoIFNIQS0yNTYsIHRoZW4gdGFrZSB0aGUgbGVmdC1tb3N0IDEyOCBiaXRzIGFuZCBiYXNlNjR1cmwgZW5jb2RlXHJcbiAqIHRoZW0uIFRoZSBfaGFzaCB2YWx1ZSBpcyBhIGNhc2Ugc2Vuc2l0aXZlIHN0cmluZy5cclxuICovXHJcblxyXG4vKipcclxuICogQG5hbWUgZ2V0SGFzaFxyXG4gKiBAYXBpIHByaXZhdGVcclxuICpcclxuICogcmV0dXJucyB0aGUgc2hhIGxlbmd0aCBiYXNlZCBvZmYgdGhlIEpPU0UgYWxnIGhlYWRlIHZhbHVlLCBkZWZhdWx0cyB0byBzaGEyNTZcclxuICpcclxuICogQHBhcmFtIHRva2VuIHtTdHJpbmd9IHRva2VuIHZhbHVlIHRvIGdlbmVyYXRlIHRoZSBoYXNoIGZyb21cclxuICogQHBhcmFtIGFsZyB7U3RyaW5nfSBJRCBUb2tlbiBKT1NFIGhlYWRlciBhbGcgdmFsdWUgKGkuZS4gUlMyNTYsIEhTMzg0LCBFUzUxMiwgUFMyNTYpXHJcbiAqIEBwYXJhbSBbY3J2XSB7U3RyaW5nfSBGb3IgRWREU0EgdGhlIGN1cnZlIGRlY2lkZXMgd2hhdCBoYXNoIGFsZ29yaXRobSBpcyB1c2VkLiBSZXF1aXJlZCBmb3IgRWREU0FcclxuICovXHJcbmZ1bmN0aW9uIGdldEhhc2goYWxnLCBjcnYpIHtcclxuICBzd2l0Y2ggKGFsZykge1xyXG4gICAgY2FzZSAnSFMyNTYnOlxyXG4gICAgY2FzZSAnUlMyNTYnOlxyXG4gICAgY2FzZSAnUFMyNTYnOlxyXG4gICAgY2FzZSAnRVMyNTYnOlxyXG4gICAgY2FzZSAnRVMyNTZLJzpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTI1NicpO1xyXG5cclxuICAgIGNhc2UgJ0hTMzg0JzpcclxuICAgIGNhc2UgJ1JTMzg0JzpcclxuICAgIGNhc2UgJ1BTMzg0JzpcclxuICAgIGNhc2UgJ0VTMzg0JzpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTM4NCcpO1xyXG5cclxuICAgIGNhc2UgJ0hTNTEyJzpcclxuICAgIGNhc2UgJ1JTNTEyJzpcclxuICAgIGNhc2UgJ1BTNTEyJzpcclxuICAgIGNhc2UgJ0VTNTEyJzpcclxuICAgICAgcmV0dXJuIGNyZWF0ZUhhc2goJ3NoYTUxMicpO1xyXG5cclxuICAgIGNhc2UgJ0VkRFNBJzpcclxuICAgICAgc3dpdGNoIChjcnYpIHtcclxuICAgICAgICBjYXNlICdFZDI1NTE5JzpcclxuICAgICAgICAgIHJldHVybiBjcmVhdGVIYXNoKCdzaGE1MTInKTtcclxuICAgICAgICBjYXNlICdFZDQ0OCc6XHJcbiAgICAgICAgICBpZiAoIXNoYWtlMjU2KSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VkNDQ4ICpfaGFzaCBjYWxjdWxhdGlvbiBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgTm9kZS5qcyBydW50aW1lIHZlcnNpb24nKTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hha2UyNTYnLCB7IG91dHB1dExlbmd0aDogMTE0IH0pO1xyXG4gICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bnJlY29nbml6ZWQgb3IgaW52YWxpZCBFZERTQSBjdXJ2ZSBwcm92aWRlZCcpO1xyXG4gICAgICB9XHJcblxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5yZWNvZ25pemVkIG9yIGludmFsaWQgSldTIGFsZ29yaXRobSBwcm92aWRlZCcpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gZ2VuZXJhdGUodG9rZW4sIGFsZywgY3J2KSB7XHJcbiAgY29uc3QgZGlnZXN0ID0gZ2V0SGFzaChhbGcsIGNydikudXBkYXRlKHRva2VuKS5kaWdlc3QoKTtcclxuICByZXR1cm4gZW5jb2RlKGRpZ2VzdC5zbGljZSgwLCBkaWdlc3QubGVuZ3RoIC8gMikpO1xyXG59XHJcblxyXG5mdW5jdGlvbiB2YWxpZGF0ZShuYW1lcywgYWN0dWFsLCBzb3VyY2UsIGFsZywgY3J2KSB7XHJcbiAgaWYgKHR5cGVvZiBuYW1lcy5jbGFpbSAhPT0gJ3N0cmluZycgfHwgIW5hbWVzLmNsYWltKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduYW1lcy5jbGFpbSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xyXG4gIH1cclxuXHJcbiAgaWYgKHR5cGVvZiBuYW1lcy5zb3VyY2UgIT09ICdzdHJpbmcnIHx8ICFuYW1lcy5zb3VyY2UpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ25hbWVzLnNvdXJjZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xyXG4gIH1cclxuXHJcbiAgYXNzZXJ0KHR5cGVvZiBhY3R1YWwgPT09ICdzdHJpbmcnICYmIGFjdHVhbCwgYCR7bmFtZXMuY2xhaW19IG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nYCk7XHJcbiAgYXNzZXJ0KHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnICYmIHNvdXJjZSwgYCR7bmFtZXMuc291cmNlfSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZ2ApO1xyXG5cclxuICBsZXQgZXhwZWN0ZWQ7XHJcbiAgbGV0IG1zZztcclxuICB0cnkge1xyXG4gICAgZXhwZWN0ZWQgPSBnZW5lcmF0ZShzb3VyY2UsIGFsZywgY3J2KTtcclxuICB9IGNhdGNoIChlcnIpIHtcclxuICAgIG1zZyA9IGZvcm1hdCgnJXMgY291bGQgbm90IGJlIHZhbGlkYXRlZCAoJXMpJywgbmFtZXMuY2xhaW0sIGVyci5tZXNzYWdlKTtcclxuICB9XHJcblxyXG4gIG1zZyA9IG1zZyB8fCBmb3JtYXQoJyVzIG1pc21hdGNoLCBleHBlY3RlZCAlcywgZ290OiAlcycsIG5hbWVzLmNsYWltLCBleHBlY3RlZCwgYWN0dWFsKTtcclxuXHJcbiAgYXNzZXJ0LmVxdWFsKGV4cGVjdGVkLCBhY3R1YWwsIG1zZyk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIHZhbGlkYXRlLFxyXG4gIGdlbmVyYXRlLFxyXG59O1xyXG4iXSwibmFtZXMiOlsic3RyaWN0IiwiYXNzZXJ0IiwicmVxdWlyZSIsImNyZWF0ZUhhc2giLCJmb3JtYXQiLCJzaGFrZTI1NiIsImVuY29kZSIsIkJ1ZmZlciIsImlzRW5jb2RpbmciLCJpbnB1dCIsInRvU3RyaW5nIiwiZnJvbUJhc2U2NCIsImJhc2U2NCIsInJlcGxhY2UiLCJnZXRIYXNoIiwiYWxnIiwiY3J2IiwiVHlwZUVycm9yIiwib3V0cHV0TGVuZ3RoIiwiZ2VuZXJhdGUiLCJ0b2tlbiIsImRpZ2VzdCIsInVwZGF0ZSIsInNsaWNlIiwibGVuZ3RoIiwidmFsaWRhdGUiLCJuYW1lcyIsImFjdHVhbCIsInNvdXJjZSIsImNsYWltIiwiZXhwZWN0ZWQiLCJtc2ciLCJlcnIiLCJtZXNzYWdlIiwiZXF1YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oidc-token-hash/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/oidc-token-hash/lib/shake256.js":
/*!******************************************************!*\
  !*** ./node_modules/oidc-token-hash/lib/shake256.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const crypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst [major, minor] = process.version.substring(1).split(\".\").map((x)=>parseInt(x, 10));\nconst xofOutputLength = major > 12 || major === 12 && minor >= 8;\nconst shake256 = xofOutputLength && crypto.getHashes().includes(\"shake256\");\nmodule.exports = shake256;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvb2lkYy10b2tlbi1oYXNoL2xpYi9zaGFrZTI1Ni5qcyIsIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUV2QixNQUFNLENBQUNDLE9BQU9DLE1BQU0sR0FBR0MsUUFBUUMsT0FBTyxDQUFDQyxTQUFTLENBQUMsR0FBR0MsS0FBSyxDQUFDLEtBQUtDLEdBQUcsQ0FBQyxDQUFDQyxJQUFNQyxTQUFTRCxHQUFHO0FBQ3RGLE1BQU1FLGtCQUFrQlQsUUFBUSxNQUFPQSxVQUFVLE1BQU1DLFNBQVM7QUFDaEUsTUFBTVMsV0FBV0QsbUJBQW1CWCxPQUFPYSxTQUFTLEdBQUdDLFFBQVEsQ0FBQztBQUVoRUMsT0FBT0MsT0FBTyxHQUFHSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL29pZGMtdG9rZW4taGFzaC9saWIvc2hha2UyNTYuanM/ODI0NSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKTtcclxuXHJcbmNvbnN0IFttYWpvciwgbWlub3JdID0gcHJvY2Vzcy52ZXJzaW9uLnN1YnN0cmluZygxKS5zcGxpdCgnLicpLm1hcCgoeCkgPT4gcGFyc2VJbnQoeCwgMTApKTtcclxuY29uc3QgeG9mT3V0cHV0TGVuZ3RoID0gbWFqb3IgPiAxMiB8fCAobWFqb3IgPT09IDEyICYmIG1pbm9yID49IDgpO1xyXG5jb25zdCBzaGFrZTI1NiA9IHhvZk91dHB1dExlbmd0aCAmJiBjcnlwdG8uZ2V0SGFzaGVzKCkuaW5jbHVkZXMoJ3NoYWtlMjU2Jyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWtlMjU2O1xyXG4iXSwibmFtZXMiOlsiY3J5cHRvIiwicmVxdWlyZSIsIm1ham9yIiwibWlub3IiLCJwcm9jZXNzIiwidmVyc2lvbiIsInN1YnN0cmluZyIsInNwbGl0IiwibWFwIiwieCIsInBhcnNlSW50IiwieG9mT3V0cHV0TGVuZ3RoIiwic2hha2UyNTYiLCJnZXRIYXNoZXMiLCJpbmNsdWRlcyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/oidc-token-hash/lib/shake256.js\n");

/***/ })

};
;