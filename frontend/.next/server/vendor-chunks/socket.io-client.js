"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/socket.io-client";
exports.ids = ["vendor-chunks/socket.io-client"];
exports.modules = {

/***/ "(ssr)/../node_modules/socket.io-client/build/esm-debug/contrib/backo2.js":
/*!**************************************************************************!*\
  !*** ../node_modules/socket.io-client/build/esm-debug/contrib/backo2.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Backoff: () => (/* binding */ Backoff)\n/* harmony export */ });\n/**\r\n * Initialize backoff timer with `opts`.\r\n *\r\n * - `min` initial timeout in milliseconds [100]\r\n * - `max` max timeout [10000]\r\n * - `jitter` [0]\r\n * - `factor` [2]\r\n *\r\n * @param {Object} opts\r\n * @api public\r\n */ function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\r\n * Return the backoff duration.\r\n *\r\n * @return {Number}\r\n * @api public\r\n */ Backoff.prototype.duration = function() {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\r\n * Reset the number of attempts.\r\n *\r\n * @api public\r\n */ Backoff.prototype.reset = function() {\n    this.attempts = 0;\n};\n/**\r\n * Set the minimum duration\r\n *\r\n * @api public\r\n */ Backoff.prototype.setMin = function(min) {\n    this.ms = min;\n};\n/**\r\n * Set the maximum duration\r\n *\r\n * @api public\r\n */ Backoff.prototype.setMax = function(max) {\n    this.max = max;\n};\n/**\r\n * Set the jitter\r\n *\r\n * @api public\r\n */ Backoff.prototype.setJitter = function(jitter) {\n    this.jitter = jitter;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtLWRlYnVnL2NvbnRyaWIvYmFja28yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7Ozs7Ozs7OztDQVVDLEdBQ00sU0FBU0EsUUFBUUMsSUFBSTtJQUN4QkEsT0FBT0EsUUFBUSxDQUFDO0lBQ2hCLElBQUksQ0FBQ0MsRUFBRSxHQUFHRCxLQUFLRSxHQUFHLElBQUk7SUFDdEIsSUFBSSxDQUFDQyxHQUFHLEdBQUdILEtBQUtHLEdBQUcsSUFBSTtJQUN2QixJQUFJLENBQUNDLE1BQU0sR0FBR0osS0FBS0ksTUFBTSxJQUFJO0lBQzdCLElBQUksQ0FBQ0MsTUFBTSxHQUFHTCxLQUFLSyxNQUFNLEdBQUcsS0FBS0wsS0FBS0ssTUFBTSxJQUFJLElBQUlMLEtBQUtLLE1BQU0sR0FBRztJQUNsRSxJQUFJLENBQUNDLFFBQVEsR0FBRztBQUNwQjtBQUNBOzs7OztDQUtDLEdBQ0RQLFFBQVFRLFNBQVMsQ0FBQ0MsUUFBUSxHQUFHO0lBQ3pCLElBQUlQLEtBQUssSUFBSSxDQUFDQSxFQUFFLEdBQUdRLEtBQUtDLEdBQUcsQ0FBQyxJQUFJLENBQUNOLE1BQU0sRUFBRSxJQUFJLENBQUNFLFFBQVE7SUFDdEQsSUFBSSxJQUFJLENBQUNELE1BQU0sRUFBRTtRQUNiLElBQUlNLE9BQU9GLEtBQUtHLE1BQU07UUFDdEIsSUFBSUMsWUFBWUosS0FBS0ssS0FBSyxDQUFDSCxPQUFPLElBQUksQ0FBQ04sTUFBTSxHQUFHSjtRQUNoREEsS0FBSyxDQUFDUSxLQUFLSyxLQUFLLENBQUNILE9BQU8sTUFBTSxNQUFNLElBQUlWLEtBQUtZLFlBQVlaLEtBQUtZO0lBQ2xFO0lBQ0EsT0FBT0osS0FBS1AsR0FBRyxDQUFDRCxJQUFJLElBQUksQ0FBQ0UsR0FBRyxJQUFJO0FBQ3BDO0FBQ0E7Ozs7Q0FJQyxHQUNESixRQUFRUSxTQUFTLENBQUNRLEtBQUssR0FBRztJQUN0QixJQUFJLENBQUNULFFBQVEsR0FBRztBQUNwQjtBQUNBOzs7O0NBSUMsR0FDRFAsUUFBUVEsU0FBUyxDQUFDUyxNQUFNLEdBQUcsU0FBVWQsR0FBRztJQUNwQyxJQUFJLENBQUNELEVBQUUsR0FBR0M7QUFDZDtBQUNBOzs7O0NBSUMsR0FDREgsUUFBUVEsU0FBUyxDQUFDVSxNQUFNLEdBQUcsU0FBVWQsR0FBRztJQUNwQyxJQUFJLENBQUNBLEdBQUcsR0FBR0E7QUFDZjtBQUNBOzs7O0NBSUMsR0FDREosUUFBUVEsU0FBUyxDQUFDVyxTQUFTLEdBQUcsU0FBVWIsTUFBTTtJQUMxQyxJQUFJLENBQUNBLE1BQU0sR0FBR0E7QUFDbEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20tZGVidWcvY29udHJpYi9iYWNrbzIuanM/MGY2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogSW5pdGlhbGl6ZSBiYWNrb2ZmIHRpbWVyIHdpdGggYG9wdHNgLlxyXG4gKlxyXG4gKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF1cclxuICogLSBgbWF4YCBtYXggdGltZW91dCBbMTAwMDBdXHJcbiAqIC0gYGppdHRlcmAgWzBdXHJcbiAqIC0gYGZhY3RvcmAgWzJdXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XHJcbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcclxuICAgIHRoaXMubXMgPSBvcHRzLm1pbiB8fCAxMDA7XHJcbiAgICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xyXG4gICAgdGhpcy5mYWN0b3IgPSBvcHRzLmZhY3RvciB8fCAyO1xyXG4gICAgdGhpcy5qaXR0ZXIgPSBvcHRzLmppdHRlciA+IDAgJiYgb3B0cy5qaXR0ZXIgPD0gMSA/IG9wdHMuaml0dGVyIDogMDtcclxuICAgIHRoaXMuYXR0ZW1wdHMgPSAwO1xyXG59XHJcbi8qKlxyXG4gKiBSZXR1cm4gdGhlIGJhY2tvZmYgZHVyYXRpb24uXHJcbiAqXHJcbiAqIEByZXR1cm4ge051bWJlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xyXG4gICAgaWYgKHRoaXMuaml0dGVyKSB7XHJcbiAgICAgICAgdmFyIHJhbmQgPSBNYXRoLnJhbmRvbSgpO1xyXG4gICAgICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcclxuICAgICAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwID8gbXMgLSBkZXZpYXRpb24gOiBtcyArIGRldmlhdGlvbjtcclxuICAgIH1cclxuICAgIHJldHVybiBNYXRoLm1pbihtcywgdGhpcy5tYXgpIHwgMDtcclxufTtcclxuLyoqXHJcbiAqIFJlc2V0IHRoZSBudW1iZXIgb2YgYXR0ZW1wdHMuXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5CYWNrb2ZmLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuYXR0ZW1wdHMgPSAwO1xyXG59O1xyXG4vKipcclxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbiAobWluKSB7XHJcbiAgICB0aGlzLm1zID0gbWluO1xyXG59O1xyXG4vKipcclxuICogU2V0IHRoZSBtYXhpbXVtIGR1cmF0aW9uXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNYXggPSBmdW5jdGlvbiAobWF4KSB7XHJcbiAgICB0aGlzLm1heCA9IG1heDtcclxufTtcclxuLyoqXHJcbiAqIFNldCB0aGUgaml0dGVyXHJcbiAqXHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRKaXR0ZXIgPSBmdW5jdGlvbiAoaml0dGVyKSB7XHJcbiAgICB0aGlzLmppdHRlciA9IGppdHRlcjtcclxufTtcclxuIl0sIm5hbWVzIjpbIkJhY2tvZmYiLCJvcHRzIiwibXMiLCJtaW4iLCJtYXgiLCJmYWN0b3IiLCJqaXR0ZXIiLCJhdHRlbXB0cyIsInByb3RvdHlwZSIsImR1cmF0aW9uIiwiTWF0aCIsInBvdyIsInJhbmQiLCJyYW5kb20iLCJkZXZpYXRpb24iLCJmbG9vciIsInJlc2V0Iiwic2V0TWluIiwic2V0TWF4Iiwic2V0Sml0dGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/socket.io-client/build/esm-debug/contrib/backo2.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/socket.io-client/build/esm-debug/index.js":
/*!*****************************************************************!*\
  !*** ../node_modules/socket.io-client/build/esm-debug/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Manager: () => (/* reexport safe */ _manager_js__WEBPACK_IMPORTED_MODULE_1__.Manager),\n/* harmony export */   Socket: () => (/* reexport safe */ _socket_js__WEBPACK_IMPORTED_MODULE_2__.Socket),\n/* harmony export */   connect: () => (/* binding */ lookup),\n/* harmony export */   \"default\": () => (/* binding */ lookup),\n/* harmony export */   io: () => (/* binding */ lookup),\n/* harmony export */   protocol: () => (/* reexport safe */ socket_io_parser__WEBPACK_IMPORTED_MODULE_4__.protocol)\n/* harmony export */ });\n/* harmony import */ var _url_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./url.js */ \"(ssr)/../node_modules/socket.io-client/build/esm-debug/url.js\");\n/* harmony import */ var _manager_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./manager.js */ \"(ssr)/../node_modules/socket.io-client/build/esm-debug/manager.js\");\n/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./socket.js */ \"(ssr)/../node_modules/socket.io-client/build/esm-debug/socket.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! debug */ \"(ssr)/../node_modules/debug/src/index.js\");\n/* harmony import */ var socket_io_parser__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! socket.io-parser */ \"(ssr)/../node_modules/socket.io-parser/build/esm-debug/index.js\");\n\n\n\n // debug()\nconst debug = debug__WEBPACK_IMPORTED_MODULE_3__(\"socket.io-client\"); // debug()\n/**\r\n * Managers cache.\r\n */ const cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = (0,_url_js__WEBPACK_IMPORTED_MODULE_0__.url)(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew || opts[\"force new connection\"] || false === opts.multiplex || sameNamespace;\n    let io;\n    if (newConnection) {\n        debug(\"ignoring socket cache for %s\", source);\n        io = new _manager_js__WEBPACK_IMPORTED_MODULE_1__.Manager(source, opts);\n    } else {\n        if (!cache[id]) {\n            debug(\"new io instance for %s\", source);\n            cache[id] = new _manager_js__WEBPACK_IMPORTED_MODULE_1__.Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager: _manager_js__WEBPACK_IMPORTED_MODULE_1__.Manager,\n    Socket: _socket_js__WEBPACK_IMPORTED_MODULE_2__.Socket,\n    io: lookup,\n    connect: lookup\n});\n/**\r\n * Protocol version.\r\n *\r\n * @public\r\n */ \n/**\r\n * Expose constructors for standalone build.\r\n *\r\n * @public\r\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtLWRlYnVnL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQ1E7QUFDRjtBQUNMLENBQUMsVUFBVTtBQUMzQyxNQUFNSSxRQUFRRCxrQ0FBV0EsQ0FBQyxxQkFBcUIsVUFBVTtBQUN6RDs7Q0FFQyxHQUNELE1BQU1FLFFBQVEsQ0FBQztBQUNmLFNBQVNDLE9BQU9DLEdBQUcsRUFBRUMsSUFBSTtJQUNyQixJQUFJLE9BQU9ELFFBQVEsVUFBVTtRQUN6QkMsT0FBT0Q7UUFDUEEsTUFBTUU7SUFDVjtJQUNBRCxPQUFPQSxRQUFRLENBQUM7SUFDaEIsTUFBTUUsU0FBU1YsNENBQUdBLENBQUNPLEtBQUtDLEtBQUtHLElBQUksSUFBSTtJQUNyQyxNQUFNQyxTQUFTRixPQUFPRSxNQUFNO0lBQzVCLE1BQU1DLEtBQUtILE9BQU9HLEVBQUU7SUFDcEIsTUFBTUYsT0FBT0QsT0FBT0MsSUFBSTtJQUN4QixNQUFNRyxnQkFBZ0JULEtBQUssQ0FBQ1EsR0FBRyxJQUFJRixRQUFRTixLQUFLLENBQUNRLEdBQUcsQ0FBQyxPQUFPO0lBQzVELE1BQU1FLGdCQUFnQlAsS0FBS1EsUUFBUSxJQUMvQlIsSUFBSSxDQUFDLHVCQUF1QixJQUM1QixVQUFVQSxLQUFLUyxTQUFTLElBQ3hCSDtJQUNKLElBQUlJO0lBQ0osSUFBSUgsZUFBZTtRQUNmWCxNQUFNLGdDQUFnQ1E7UUFDdENNLEtBQUssSUFBSWpCLGdEQUFPQSxDQUFDVyxRQUFRSjtJQUM3QixPQUNLO1FBQ0QsSUFBSSxDQUFDSCxLQUFLLENBQUNRLEdBQUcsRUFBRTtZQUNaVCxNQUFNLDBCQUEwQlE7WUFDaENQLEtBQUssQ0FBQ1EsR0FBRyxHQUFHLElBQUlaLGdEQUFPQSxDQUFDVyxRQUFRSjtRQUNwQztRQUNBVSxLQUFLYixLQUFLLENBQUNRLEdBQUc7SUFDbEI7SUFDQSxJQUFJSCxPQUFPUyxLQUFLLElBQUksQ0FBQ1gsS0FBS1csS0FBSyxFQUFFO1FBQzdCWCxLQUFLVyxLQUFLLEdBQUdULE9BQU9VLFFBQVE7SUFDaEM7SUFDQSxPQUFPRixHQUFHRyxNQUFNLENBQUNYLE9BQU9DLElBQUksRUFBRUg7QUFDbEM7QUFDQSw0RUFBNEU7QUFDNUUsaUVBQWlFO0FBQ2pFYyxPQUFPQyxNQUFNLENBQUNqQixRQUFRO0lBQ2xCTCxPQUFPQSxrREFBQUE7SUFDUEMsTUFBTUEsZ0RBQUFBO0lBQ05nQixJQUFJWjtJQUNKa0IsU0FBU2xCO0FBQ2I7QUFDQTs7OztDQUlDLEdBQzJDO0FBQzVDOzs7O0NBSUMsR0FDK0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20tZGVidWcvaW5kZXguanM/MGE0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1cmwgfSBmcm9tIFwiLi91cmwuanNcIjtcclxuaW1wb3J0IHsgTWFuYWdlciB9IGZyb20gXCIuL21hbmFnZXIuanNcIjtcclxuaW1wb3J0IHsgU29ja2V0IH0gZnJvbSBcIi4vc29ja2V0LmpzXCI7XHJcbmltcG9ydCBkZWJ1Z01vZHVsZSBmcm9tIFwiZGVidWdcIjsgLy8gZGVidWcoKVxyXG5jb25zdCBkZWJ1ZyA9IGRlYnVnTW9kdWxlKFwic29ja2V0LmlvLWNsaWVudFwiKTsgLy8gZGVidWcoKVxyXG4vKipcclxuICogTWFuYWdlcnMgY2FjaGUuXHJcbiAqL1xyXG5jb25zdCBjYWNoZSA9IHt9O1xyXG5mdW5jdGlvbiBsb29rdXAodXJpLCBvcHRzKSB7XHJcbiAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgIG9wdHMgPSB1cmk7XHJcbiAgICAgICAgdXJpID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgb3B0cyA9IG9wdHMgfHwge307XHJcbiAgICBjb25zdCBwYXJzZWQgPSB1cmwodXJpLCBvcHRzLnBhdGggfHwgXCIvc29ja2V0LmlvXCIpO1xyXG4gICAgY29uc3Qgc291cmNlID0gcGFyc2VkLnNvdXJjZTtcclxuICAgIGNvbnN0IGlkID0gcGFyc2VkLmlkO1xyXG4gICAgY29uc3QgcGF0aCA9IHBhcnNlZC5wYXRoO1xyXG4gICAgY29uc3Qgc2FtZU5hbWVzcGFjZSA9IGNhY2hlW2lkXSAmJiBwYXRoIGluIGNhY2hlW2lkXVtcIm5zcHNcIl07XHJcbiAgICBjb25zdCBuZXdDb25uZWN0aW9uID0gb3B0cy5mb3JjZU5ldyB8fFxyXG4gICAgICAgIG9wdHNbXCJmb3JjZSBuZXcgY29ubmVjdGlvblwiXSB8fFxyXG4gICAgICAgIGZhbHNlID09PSBvcHRzLm11bHRpcGxleCB8fFxyXG4gICAgICAgIHNhbWVOYW1lc3BhY2U7XHJcbiAgICBsZXQgaW87XHJcbiAgICBpZiAobmV3Q29ubmVjdGlvbikge1xyXG4gICAgICAgIGRlYnVnKFwiaWdub3Jpbmcgc29ja2V0IGNhY2hlIGZvciAlc1wiLCBzb3VyY2UpO1xyXG4gICAgICAgIGlvID0gbmV3IE1hbmFnZXIoc291cmNlLCBvcHRzKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmICghY2FjaGVbaWRdKSB7XHJcbiAgICAgICAgICAgIGRlYnVnKFwibmV3IGlvIGluc3RhbmNlIGZvciAlc1wiLCBzb3VyY2UpO1xyXG4gICAgICAgICAgICBjYWNoZVtpZF0gPSBuZXcgTWFuYWdlcihzb3VyY2UsIG9wdHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbyA9IGNhY2hlW2lkXTtcclxuICAgIH1cclxuICAgIGlmIChwYXJzZWQucXVlcnkgJiYgIW9wdHMucXVlcnkpIHtcclxuICAgICAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5S2V5O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGlvLnNvY2tldChwYXJzZWQucGF0aCwgb3B0cyk7XHJcbn1cclxuLy8gc28gdGhhdCBcImxvb2t1cFwiIGNhbiBiZSB1c2VkIGJvdGggYXMgYSBmdW5jdGlvbiAoZS5nLiBgaW8oLi4uKWApIGFuZCBhcyBhXHJcbi8vIG5hbWVzcGFjZSAoZS5nLiBgaW8uY29ubmVjdCguLi4pYCksIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XHJcbk9iamVjdC5hc3NpZ24obG9va3VwLCB7XHJcbiAgICBNYW5hZ2VyLFxyXG4gICAgU29ja2V0LFxyXG4gICAgaW86IGxvb2t1cCxcclxuICAgIGNvbm5lY3Q6IGxvb2t1cCxcclxufSk7XHJcbi8qKlxyXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgeyBwcm90b2NvbCB9IGZyb20gXCJzb2NrZXQuaW8tcGFyc2VyXCI7XHJcbi8qKlxyXG4gKiBFeHBvc2UgY29uc3RydWN0b3JzIGZvciBzdGFuZGFsb25lIGJ1aWxkLlxyXG4gKlxyXG4gKiBAcHVibGljXHJcbiAqL1xyXG5leHBvcnQgeyBNYW5hZ2VyLCBTb2NrZXQsIGxvb2t1cCBhcyBpbywgbG9va3VwIGFzIGNvbm5lY3QsIGxvb2t1cCBhcyBkZWZhdWx0LCB9O1xyXG4iXSwibmFtZXMiOlsidXJsIiwiTWFuYWdlciIsIlNvY2tldCIsImRlYnVnTW9kdWxlIiwiZGVidWciLCJjYWNoZSIsImxvb2t1cCIsInVyaSIsIm9wdHMiLCJ1bmRlZmluZWQiLCJwYXJzZWQiLCJwYXRoIiwic291cmNlIiwiaWQiLCJzYW1lTmFtZXNwYWNlIiwibmV3Q29ubmVjdGlvbiIsImZvcmNlTmV3IiwibXVsdGlwbGV4IiwiaW8iLCJxdWVyeSIsInF1ZXJ5S2V5Iiwic29ja2V0IiwiT2JqZWN0IiwiYXNzaWduIiwiY29ubmVjdCIsInByb3RvY29sIiwiZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/socket.io-client/build/esm-debug/index.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/socket.io-client/build/esm-debug/manager.js":
/*!*******************************************************************!*\
  !*** ../node_modules/socket.io-client/build/esm-debug/manager.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Manager: () => (/* binding */ Manager)\n/* harmony export */ });\n/* harmony import */ var engine_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! engine.io-client */ \"(ssr)/../node_modules/engine.io-client/build/esm-debug/index.js\");\n/* harmony import */ var _socket_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./socket.js */ \"(ssr)/../node_modules/socket.io-client/build/esm-debug/socket.js\");\n/* harmony import */ var socket_io_parser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-parser */ \"(ssr)/../node_modules/socket.io-parser/build/esm-debug/index.js\");\n/* harmony import */ var _on_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./on.js */ \"(ssr)/../node_modules/socket.io-client/build/esm-debug/on.js\");\n/* harmony import */ var _contrib_backo2_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./contrib/backo2.js */ \"(ssr)/../node_modules/socket.io-client/build/esm-debug/contrib/backo2.js\");\n/* harmony import */ var _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @socket.io/component-emitter */ \"(ssr)/../node_modules/@socket.io/component-emitter/index.mjs\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! debug */ \"(ssr)/../node_modules/debug/src/index.js\");\n\n\n\n\n\n\n // debug()\nconst debug = debug__WEBPACK_IMPORTED_MODULE_6__(\"socket.io-client:manager\"); // debug()\nclass Manager extends _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_5__.Emitter {\n    constructor(uri, opts){\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        (0,engine_io_client__WEBPACK_IMPORTED_MODULE_0__.installTimerFunctions)(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new _contrib_backo2_js__WEBPACK_IMPORTED_MODULE_4__.Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor()\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || socket_io_parser__WEBPACK_IMPORTED_MODULE_2__;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect) this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length) return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined) return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined) return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined) return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined) return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length) return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\r\n     * Starts trying to reconnect if reconnection is enabled and we have not\r\n     * started reconnecting yet\r\n     *\r\n     * @private\r\n     */ maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\r\n     * Sets the current transport `socket`.\r\n     *\r\n     * @param {Function} fn - optional, callback\r\n     * @return self\r\n     * @public\r\n     */ open(fn) {\n        debug(\"readyState %s\", this._readyState);\n        if (~this._readyState.indexOf(\"open\")) return this;\n        debug(\"opening %s\", this.uri);\n        this.engine = new engine_io_client__WEBPACK_IMPORTED_MODULE_0__.Socket(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"open\", function() {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err)=>{\n            debug(\"error\");\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            } else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            debug(\"connect attempt will timeout after %d\", timeout);\n            // set timer\n            const timer = this.setTimeoutFn(()=>{\n                debug(\"connect attempt timed out after %d\", timeout);\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(()=>{\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\r\n     * Alias for open()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */ connect(fn) {\n        return this.open(fn);\n    }\n    /**\r\n     * Called upon transport open.\r\n     *\r\n     * @private\r\n     */ onopen() {\n        debug(\"open\");\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push((0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"ping\", this.onping.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"data\", this.ondata.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"error\", this.onerror.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(socket, \"close\", this.onclose.bind(this)), (0,_on_js__WEBPACK_IMPORTED_MODULE_3__.on)(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\r\n     * Called upon a ping.\r\n     *\r\n     * @private\r\n     */ onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\r\n     * Called with data.\r\n     *\r\n     * @private\r\n     */ ondata(data) {\n        try {\n            this.decoder.add(data);\n        } catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\r\n     * Called when parser fully decodes a packet.\r\n     *\r\n     * @private\r\n     */ ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        (0,engine_io_client__WEBPACK_IMPORTED_MODULE_0__.nextTick)(()=>{\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\r\n     * Called upon socket error.\r\n     *\r\n     * @private\r\n     */ onerror(err) {\n        debug(\"error\", err);\n        this.emitReserved(\"error\", err);\n    }\n    /**\r\n     * Creates a new socket for the given `nsp`.\r\n     *\r\n     * @return {Socket}\r\n     * @public\r\n     */ socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new _socket_js__WEBPACK_IMPORTED_MODULE_1__.Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        } else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\r\n     * Called upon a socket close.\r\n     *\r\n     * @param socket\r\n     * @private\r\n     */ _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps){\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                debug(\"socket %s is still active, skipping close\", nsp);\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\r\n     * Writes a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */ _packet(packet) {\n        debug(\"writing packet %j\", packet);\n        const encodedPackets = this.encoder.encode(packet);\n        for(let i = 0; i < encodedPackets.length; i++){\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\r\n     * Clean up transport subscriptions and packet buffer.\r\n     *\r\n     * @private\r\n     */ cleanup() {\n        debug(\"cleanup\");\n        this.subs.forEach((subDestroy)=>subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\r\n     * Close the current socket.\r\n     *\r\n     * @private\r\n     */ _close() {\n        debug(\"disconnect\");\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine) this.engine.close();\n    }\n    /**\r\n     * Alias for close()\r\n     *\r\n     * @private\r\n     */ disconnect() {\n        return this._close();\n    }\n    /**\r\n     * Called upon engine close.\r\n     *\r\n     * @private\r\n     */ onclose(reason, description) {\n        debug(\"closed due to %s\", reason);\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\r\n     * Attempt a reconnection.\r\n     *\r\n     * @private\r\n     */ reconnect() {\n        if (this._reconnecting || this.skipReconnect) return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            debug(\"reconnect failed\");\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        } else {\n            const delay = this.backoff.duration();\n            debug(\"will wait %dms before reconnect attempt\", delay);\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(()=>{\n                if (self.skipReconnect) return;\n                debug(\"attempting reconnect\");\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect) return;\n                self.open((err)=>{\n                    if (err) {\n                        debug(\"reconnect attempt error\");\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    } else {\n                        debug(\"reconnect success\");\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(()=>{\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\r\n     * Called upon successful reconnect.\r\n     *\r\n     * @private\r\n     */ onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtLWRlYnVnL21hbmFnZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0Y7QUFDakQ7QUFDTTtBQUNkO0FBQ2lCO0FBQ1U7QUFDeEIsQ0FBQyxVQUFVO0FBQzNDLE1BQU1TLFFBQVFELGtDQUFXQSxDQUFDLDZCQUE2QixVQUFVO0FBQzFELE1BQU1FLGdCQUFnQkgsaUVBQU9BO0lBQ2hDSSxZQUFZQyxHQUFHLEVBQUVDLElBQUksQ0FBRTtRQUNuQixJQUFJQztRQUNKLEtBQUs7UUFDTCxJQUFJLENBQUNDLElBQUksR0FBRyxDQUFDO1FBQ2IsSUFBSSxDQUFDQyxJQUFJLEdBQUcsRUFBRTtRQUNkLElBQUlKLE9BQU8sYUFBYSxPQUFPQSxLQUFLO1lBQ2hDQyxPQUFPRDtZQUNQQSxNQUFNSztRQUNWO1FBQ0FKLE9BQU9BLFFBQVEsQ0FBQztRQUNoQkEsS0FBS0ssSUFBSSxHQUFHTCxLQUFLSyxJQUFJLElBQUk7UUFDekIsSUFBSSxDQUFDTCxJQUFJLEdBQUdBO1FBQ1pYLHVFQUFxQkEsQ0FBQyxJQUFJLEVBQUVXO1FBQzVCLElBQUksQ0FBQ00sWUFBWSxDQUFDTixLQUFLTSxZQUFZLEtBQUs7UUFDeEMsSUFBSSxDQUFDQyxvQkFBb0IsQ0FBQ1AsS0FBS08sb0JBQW9CLElBQUlDO1FBQ3ZELElBQUksQ0FBQ0MsaUJBQWlCLENBQUNULEtBQUtTLGlCQUFpQixJQUFJO1FBQ2pELElBQUksQ0FBQ0Msb0JBQW9CLENBQUNWLEtBQUtVLG9CQUFvQixJQUFJO1FBQ3ZELElBQUksQ0FBQ0MsbUJBQW1CLENBQUMsQ0FBQ1YsS0FBS0QsS0FBS1csbUJBQW1CLE1BQU0sUUFBUVYsT0FBTyxLQUFLLElBQUlBLEtBQUs7UUFDMUYsSUFBSSxDQUFDVyxPQUFPLEdBQUcsSUFBSW5CLHVEQUFPQSxDQUFDO1lBQ3ZCb0IsS0FBSyxJQUFJLENBQUNKLGlCQUFpQjtZQUMzQkssS0FBSyxJQUFJLENB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TUFBTUssS0FBSztZQUNmO1lBQ0EsSUFBSSxDQUFDekQsSUFBSSxDQUFDMEQsSUFBSSxDQUFDO2dCQUNYLElBQUksQ0FBQ0MsY0FBYyxDQUFDUDtZQUN4QjtRQUNKO0lBQ0o7SUFDQTs7OztLQUlDLEdBQ0R3QyxjQUFjO1FBQ1YsTUFBTUMsVUFBVSxJQUFJLENBQUNwRixPQUFPLENBQUM0QixRQUFRO1FBQ3JDLElBQUksQ0FBQ0QsYUFBYSxHQUFHO1FBQ3JCLElBQUksQ0FBQzNCLE9BQU8sQ0FBQ2dGLEtBQUs7UUFDbEIsSUFBSSxDQUFDdkMsWUFBWSxDQUFDLGFBQWEyQztJQUNuQztBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtLWRlYnVnL21hbmFnZXIuanM/N2U3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTb2NrZXQgYXMgRW5naW5lLCBpbnN0YWxsVGltZXJGdW5jdGlvbnMsIG5leHRUaWNrLCB9IGZyb20gXCJlbmdpbmUuaW8tY2xpZW50XCI7XHJcbmltcG9ydCB7IFNvY2tldCB9IGZyb20gXCIuL3NvY2tldC5qc1wiO1xyXG5pbXBvcnQgKiBhcyBwYXJzZXIgZnJvbSBcInNvY2tldC5pby1wYXJzZXJcIjtcclxuaW1wb3J0IHsgb24gfSBmcm9tIFwiLi9vbi5qc1wiO1xyXG5pbXBvcnQgeyBCYWNrb2ZmIH0gZnJvbSBcIi4vY29udHJpYi9iYWNrbzIuanNcIjtcclxuaW1wb3J0IHsgRW1pdHRlciwgfSBmcm9tIFwiQHNvY2tldC5pby9jb21wb25lbnQtZW1pdHRlclwiO1xyXG5pbXBvcnQgZGVidWdNb2R1bGUgZnJvbSBcImRlYnVnXCI7IC8vIGRlYnVnKClcclxuY29uc3QgZGVidWcgPSBkZWJ1Z01vZHVsZShcInNvY2tldC5pby1jbGllbnQ6bWFuYWdlclwiKTsgLy8gZGVidWcoKVxyXG5leHBvcnQgY2xhc3MgTWFuYWdlciBleHRlbmRzIEVtaXR0ZXIge1xyXG4gICAgY29uc3RydWN0b3IodXJpLCBvcHRzKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5uc3BzID0ge307XHJcbiAgICAgICAgdGhpcy5zdWJzID0gW107XHJcbiAgICAgICAgaWYgKHVyaSAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgdXJpKSB7XHJcbiAgICAgICAgICAgIG9wdHMgPSB1cmk7XHJcbiAgICAgICAgICAgIHVyaSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgb3B0cyA9IG9wdHMgfHwge307XHJcbiAgICAgICAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8IFwiL3NvY2tldC5pb1wiO1xyXG4gICAgICAgIHRoaXMub3B0cyA9IG9wdHM7XHJcbiAgICAgICAgaW5zdGFsbFRpbWVyRnVuY3Rpb25zKHRoaXMsIG9wdHMpO1xyXG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9uKG9wdHMucmVjb25uZWN0aW9uICE9PSBmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25BdHRlbXB0cyhvcHRzLnJlY29ubmVjdGlvbkF0dGVtcHRzIHx8IEluZmluaXR5KTtcclxuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XHJcbiAgICAgICAgdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heChvcHRzLnJlY29ubmVjdGlvbkRlbGF5TWF4IHx8IDUwMDApO1xyXG4gICAgICAgIHRoaXMucmFuZG9taXphdGlvbkZhY3RvcigoX2EgPSBvcHRzLnJhbmRvbWl6YXRpb25GYWN0b3IpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IDAuNSk7XHJcbiAgICAgICAgdGhpcy5iYWNrb2ZmID0gbmV3IEJhY2tvZmYoe1xyXG4gICAgICAgICAgICBtaW46IHRoaXMucmVjb25uZWN0aW9uRGVsYXkoKSxcclxuICAgICAgICAgICAgbWF4OiB0aGlzLnJlY29ubmVjdGlvbkRlbGF5TWF4KCksXHJcbiAgICAgICAgICAgIGppdHRlcjogdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKCksXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0KG51bGwgPT0gb3B0cy50aW1lb3V0ID8gMjAwMDAgOiBvcHRzLnRpbWVvdXQpO1xyXG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xyXG4gICAgICAgIHRoaXMudXJpID0gdXJpO1xyXG4gICAgICAgIGNvbnN0IF9wYXJzZXIgPSBvcHRzLnBhcnNlciB8fCBwYXJzZXI7XHJcbiAgICAgICAgdGhpcy5lbmNvZGVyID0gbmV3IF9wYXJzZXIuRW5jb2RlcigpO1xyXG4gICAgICAgIHRoaXMuZGVjb2RlciA9IG5ldyBfcGFyc2VyLkRlY29kZXIoKTtcclxuICAgICAgICB0aGlzLl9hdXRvQ29ubmVjdCA9IG9wdHMuYXV0b0Nvbm5lY3QgIT09IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLl9hdXRvQ29ubmVjdClcclxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XHJcbiAgICB9XHJcbiAgICByZWNvbm5lY3Rpb24odikge1xyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbjtcclxuICAgICAgICB0aGlzLl9yZWNvbm5lY3Rpb24gPSAhIXY7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICByZWNvbm5lY3Rpb25BdHRlbXB0cyh2KSB7XHJcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzO1xyXG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzID0gdjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHJlY29ubmVjdGlvbkRlbGF5KHYpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5O1xyXG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcclxuICAgICAgICAoX2EgPSB0aGlzLmJhY2tvZmYpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRNaW4odik7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICByYW5kb21pemF0aW9uRmFjdG9yKHYpIHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3JhbmRvbWl6YXRpb25GYWN0b3I7XHJcbiAgICAgICAgdGhpcy5fcmFuZG9taXphdGlvbkZhY3RvciA9IHY7XHJcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0Sml0dGVyKHYpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcmVjb25uZWN0aW9uRGVsYXlNYXgodikge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7XHJcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXggPSB2O1xyXG4gICAgICAgIChfYSA9IHRoaXMuYmFja29mZikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNldE1heCh2KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHRpbWVvdXQodikge1xyXG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVvdXQ7XHJcbiAgICAgICAgdGhpcy5fdGltZW91dCA9IHY7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxyXG4gICAgICogc3RhcnRlZCByZWNvbm5lY3RpbmcgeWV0XHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgbWF5YmVSZWNvbm5lY3RPbk9wZW4oKSB7XHJcbiAgICAgICAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZ1xyXG4gICAgICAgIGlmICghdGhpcy5fcmVjb25uZWN0aW5nICYmXHJcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbiAmJlxyXG4gICAgICAgICAgICB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcclxuICAgICAgICAgICAgLy8ga2VlcHMgcmVjb25uZWN0aW9uIGZyb20gZmlyaW5nIHR3aWNlIGZvciB0aGUgc2FtZSByZWNvbm5lY3Rpb24gbG9vcFxyXG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gLSBvcHRpb25hbCwgY2FsbGJhY2tcclxuICAgICAqIEByZXR1cm4gc2VsZlxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICovXHJcbiAgICBvcGVuKGZuKSB7XHJcbiAgICAgICAgZGVidWcoXCJyZWFkeVN0YXRlICVzXCIsIHRoaXMuX3JlYWR5U3RhdGUpO1xyXG4gICAgICAgIGlmICh+dGhpcy5fcmVhZHlTdGF0ZS5pbmRleE9mKFwib3BlblwiKSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgZGVidWcoXCJvcGVuaW5nICVzXCIsIHRoaXMudXJpKTtcclxuICAgICAgICB0aGlzLmVuZ2luZSA9IG5ldyBFbmdpbmUodGhpcy51cmksIHRoaXMub3B0cyk7XHJcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gdGhpcy5lbmdpbmU7XHJcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwib3BlbmluZ1wiO1xyXG4gICAgICAgIHRoaXMuc2tpcFJlY29ubmVjdCA9IGZhbHNlO1xyXG4gICAgICAgIC8vIGVtaXQgYG9wZW5gXHJcbiAgICAgICAgY29uc3Qgb3BlblN1YkRlc3Ryb3kgPSBvbihzb2NrZXQsIFwib3BlblwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNlbGYub25vcGVuKCk7XHJcbiAgICAgICAgICAgIGZuICYmIGZuKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3Qgb25FcnJvciA9IChlcnIpID0+IHtcclxuICAgICAgICAgICAgZGVidWcoXCJlcnJvclwiKTtcclxuICAgICAgICAgICAgdGhpcy5jbGVhbnVwKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIGVycik7XHJcbiAgICAgICAgICAgIGlmIChmbikge1xyXG4gICAgICAgICAgICAgICAgZm4oZXJyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heWJlUmVjb25uZWN0T25PcGVuKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGVtaXQgYGVycm9yYFxyXG4gICAgICAgIGNvbnN0IGVycm9yU3ViID0gb24oc29ja2V0LCBcImVycm9yXCIsIG9uRXJyb3IpO1xyXG4gICAgICAgIGlmIChmYWxzZSAhPT0gdGhpcy5fdGltZW91dCkge1xyXG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcclxuICAgICAgICAgICAgZGVidWcoXCJjb25uZWN0IGF0dGVtcHQgd2lsbCB0aW1lb3V0IGFmdGVyICVkXCIsIHRpbWVvdXQpO1xyXG4gICAgICAgICAgICAvLyBzZXQgdGltZXJcclxuICAgICAgICAgICAgY29uc3QgdGltZXIgPSB0aGlzLnNldFRpbWVvdXRGbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcImNvbm5lY3QgYXR0ZW1wdCB0aW1lZCBvdXQgYWZ0ZXIgJWRcIiwgdGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICBvcGVuU3ViRGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgb25FcnJvcihuZXcgRXJyb3IoXCJ0aW1lb3V0XCIpKTtcclxuICAgICAgICAgICAgICAgIHNvY2tldC5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9LCB0aW1lb3V0KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5hdXRvVW5yZWYpIHtcclxuICAgICAgICAgICAgICAgIHRpbWVyLnVucmVmKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zdWJzLnB1c2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclRpbWVvdXRGbih0aW1lcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN1YnMucHVzaChvcGVuU3ViRGVzdHJveSk7XHJcbiAgICAgICAgdGhpcy5zdWJzLnB1c2goZXJyb3JTdWIpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Igb3BlbigpXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiBzZWxmXHJcbiAgICAgKiBAcHVibGljXHJcbiAgICAgKi9cclxuICAgIGNvbm5lY3QoZm4pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vcGVuKGZuKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IG9wZW4uXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgb25vcGVuKCkge1xyXG4gICAgICAgIGRlYnVnKFwib3BlblwiKTtcclxuICAgICAgICAvLyBjbGVhciBvbGQgc3Vic1xyXG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xyXG4gICAgICAgIC8vIG1hcmsgYXMgb3BlblxyXG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcIm9wZW5cIjtcclxuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcIm9wZW5cIik7XHJcbiAgICAgICAgLy8gYWRkIG5ldyBzdWJzXHJcbiAgICAgICAgY29uc3Qgc29ja2V0ID0gdGhpcy5lbmdpbmU7XHJcbiAgICAgICAgdGhpcy5zdWJzLnB1c2gob24oc29ja2V0LCBcInBpbmdcIiwgdGhpcy5vbnBpbmcuYmluZCh0aGlzKSksIG9uKHNvY2tldCwgXCJkYXRhXCIsIHRoaXMub25kYXRhLmJpbmQodGhpcykpLCBvbihzb2NrZXQsIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLCBvbihzb2NrZXQsIFwiY2xvc2VcIiwgdGhpcy5vbmNsb3NlLmJpbmQodGhpcykpLCBvbih0aGlzLmRlY29kZXIsIFwiZGVjb2RlZFwiLCB0aGlzLm9uZGVjb2RlZC5iaW5kKHRoaXMpKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB1cG9uIGEgcGluZy5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBvbnBpbmcoKSB7XHJcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwaW5nXCIpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2l0aCBkYXRhLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIG9uZGF0YShkYXRhKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgdGhpcy5kZWNvZGVyLmFkZChkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgdGhpcy5vbmNsb3NlKFwicGFyc2UgZXJyb3JcIiwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgd2hlbiBwYXJzZXIgZnVsbHkgZGVjb2RlcyBhIHBhY2tldC5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBvbmRlY29kZWQocGFja2V0KSB7XHJcbiAgICAgICAgLy8gdGhlIG5leHRUaWNrIGNhbGwgcHJldmVudHMgYW4gZXhjZXB0aW9uIGluIGEgdXNlci1wcm92aWRlZCBldmVudCBsaXN0ZW5lciBmcm9tIHRyaWdnZXJpbmcgYSBkaXNjb25uZWN0aW9uIGR1ZSB0byBhIFwicGFyc2UgZXJyb3JcIlxyXG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwYWNrZXRcIiwgcGFja2V0KTtcclxuICAgICAgICB9LCB0aGlzLnNldFRpbWVvdXRGbik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB1cG9uIHNvY2tldCBlcnJvci5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBvbmVycm9yKGVycikge1xyXG4gICAgICAgIGRlYnVnKFwiZXJyb3JcIiwgZXJyKTtcclxuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImVycm9yXCIsIGVycik7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgc29ja2V0IGZvciB0aGUgZ2l2ZW4gYG5zcGAuXHJcbiAgICAgKlxyXG4gICAgICogQHJldHVybiB7U29ja2V0fVxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICovXHJcbiAgICBzb2NrZXQobnNwLCBvcHRzKSB7XHJcbiAgICAgICAgbGV0IHNvY2tldCA9IHRoaXMubnNwc1tuc3BdO1xyXG4gICAgICAgIGlmICghc29ja2V0KSB7XHJcbiAgICAgICAgICAgIHNvY2tldCA9IG5ldyBTb2NrZXQodGhpcywgbnNwLCBvcHRzKTtcclxuICAgICAgICAgICAgdGhpcy5uc3BzW25zcF0gPSBzb2NrZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHRoaXMuX2F1dG9Db25uZWN0ICYmICFzb2NrZXQuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHNvY2tldC5jb25uZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzb2NrZXQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzb2NrZXRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9kZXN0cm95KHNvY2tldCkge1xyXG4gICAgICAgIGNvbnN0IG5zcHMgPSBPYmplY3Qua2V5cyh0aGlzLm5zcHMpO1xyXG4gICAgICAgIGZvciAoY29uc3QgbnNwIG9mIG5zcHMpIHtcclxuICAgICAgICAgICAgY29uc3Qgc29ja2V0ID0gdGhpcy5uc3BzW25zcF07XHJcbiAgICAgICAgICAgIGlmIChzb2NrZXQuYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcInNvY2tldCAlcyBpcyBzdGlsbCBhY3RpdmUsIHNraXBwaW5nIGNsb3NlXCIsIG5zcCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fY2xvc2UoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGVzIGEgcGFja2V0LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBwYWNrZXRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9wYWNrZXQocGFja2V0KSB7XHJcbiAgICAgICAgZGVidWcoXCJ3cml0aW5nIHBhY2tldCAlalwiLCBwYWNrZXQpO1xyXG4gICAgICAgIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZW5jb2RlZFBhY2tldHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5lbmdpbmUud3JpdGUoZW5jb2RlZFBhY2tldHNbaV0sIHBhY2tldC5vcHRpb25zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIGNsZWFudXAoKSB7XHJcbiAgICAgICAgZGVidWcoXCJjbGVhbnVwXCIpO1xyXG4gICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xyXG4gICAgICAgIHRoaXMuc3Vicy5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuZGVjb2Rlci5kZXN0cm95KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENsb3NlIHRoZSBjdXJyZW50IHNvY2tldC5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfY2xvc2UoKSB7XHJcbiAgICAgICAgZGVidWcoXCJkaXNjb25uZWN0XCIpO1xyXG4gICAgICAgIHRoaXMuc2tpcFJlY29ubmVjdCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5vbmNsb3NlKFwiZm9yY2VkIGNsb3NlXCIpO1xyXG4gICAgICAgIGlmICh0aGlzLmVuZ2luZSlcclxuICAgICAgICAgICAgdGhpcy5lbmdpbmUuY2xvc2UoKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQWxpYXMgZm9yIGNsb3NlKClcclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBkaXNjb25uZWN0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9jbG9zZSgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgY2xvc2UuXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgb25jbG9zZShyZWFzb24sIGRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgZGVidWcoXCJjbG9zZWQgZHVlIHRvICVzXCIsIHJlYXNvbik7XHJcbiAgICAgICAgdGhpcy5jbGVhbnVwKCk7XHJcbiAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XHJcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XHJcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjbG9zZVwiLCByZWFzb24sIGRlc2NyaXB0aW9uKTtcclxuICAgICAgICBpZiAodGhpcy5fcmVjb25uZWN0aW9uICYmICF0aGlzLnNraXBSZWNvbm5lY3QpIHtcclxuICAgICAgICAgICAgdGhpcy5yZWNvbm5lY3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEF0dGVtcHQgYSByZWNvbm5lY3Rpb24uXHJcbiAgICAgKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgcmVjb25uZWN0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9yZWNvbm5lY3RpbmcgfHwgdGhpcy5za2lwUmVjb25uZWN0KVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICBpZiAodGhpcy5iYWNrb2ZmLmF0dGVtcHRzID49IHRoaXMuX3JlY29ubmVjdGlvbkF0dGVtcHRzKSB7XHJcbiAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IGZhaWxlZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0X2ZhaWxlZFwiKTtcclxuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xyXG4gICAgICAgICAgICBkZWJ1ZyhcIndpbGwgd2FpdCAlZG1zIGJlZm9yZSByZWNvbm5lY3QgYXR0ZW1wdFwiLCBkZWxheSk7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gdGhpcy5zZXRUaW1lb3V0Rm4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdClcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcImF0dGVtcHRpbmcgcmVjb25uZWN0XCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfYXR0ZW1wdFwiLCBzZWxmLmJhY2tvZmYuYXR0ZW1wdHMpO1xyXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgYWdhaW4gZm9yIHRoZSBjYXNlIHNvY2tldCBjbG9zZWQgaW4gYWJvdmUgZXZlbnRzXHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5za2lwUmVjb25uZWN0KVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIHNlbGYub3BlbigoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInJlY29ubmVjdCBhdHRlbXB0IGVycm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZWNvbm5lY3RpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5yZWNvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IHN1Y2Nlc3NcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYub25yZWNvbm5lY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSwgZGVsYXkpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xyXG4gICAgICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyVGltZW91dEZuKHRpbWVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlY29ubmVjdC5cclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBvbnJlY29ubmVjdCgpIHtcclxuICAgICAgICBjb25zdCBhdHRlbXB0ID0gdGhpcy5iYWNrb2ZmLmF0dGVtcHRzO1xyXG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGluZyA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xyXG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwicmVjb25uZWN0XCIsIGF0dGVtcHQpO1xyXG4gICAgfVxyXG59XHJcbiJdLCJuYW1lcyI6WyJTb2NrZXQiLCJFbmdpbmUiLCJpbnN0YWxsVGltZXJGdW5jdGlvbnMiLCJuZXh0VGljayIsInBhcnNlciIsIm9uIiwiQmFja29mZiIsIkVtaXR0ZXIiLCJkZWJ1Z01vZHVsZSIsImRlYnVnIiwiTWFuYWdlciIsImNvbnN0cnVjdG9yIiwidXJpIiwib3B0cyIsIl9hIiwibnNwcyIsInN1YnMiLCJ1bmRlZmluZWQiLCJwYXRoIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIm1pbiIsIm1heCIsImppdHRlciIsInRpbWVvdXQiLCJfcmVhZHlTdGF0ZSIsIl9wYXJzZXIiLCJlbmNvZGVyIiwiRW5jb2RlciIsImRlY29kZXIiLCJEZWNvZGVyIiwiX2F1dG9Db25uZWN0IiwiYXV0b0Nvbm5lY3QiLCJvcGVuIiwidiIsImFyZ3VtZW50cyIsImxlbmd0aCIsIl9yZWNvbm5lY3Rpb24iLCJfcmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJfcmVjb25uZWN0aW9uRGVsYXkiLCJzZXRNaW4iLCJfcmFuZG9taXphdGlvbkZhY3RvciIsInNldEppdHRlciIsIl9yZWNvbm5lY3Rpb25EZWxheU1heCIsInNldE1heCIsIl90aW1lb3V0IiwibWF5YmVSZWNvbm5lY3RPbk9wZW4iLCJfcmVjb25uZWN0aW5nIiwiYXR0ZW1wdHMiLCJyZWNvbm5lY3QiLCJmbiIsImluZGV4T2YiLCJlbmdpbmUiLCJzb2NrZXQiLCJzZWxmIiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWJEZXN0cm95Iiwib25vcGVuIiwib25FcnJvciIsImVyciIsImNsZWFudXAiLCJlbWl0UmVzZXJ2ZWQiLCJlcnJvclN1YiIsInRpbWVyIiwic2V0VGltZW91dEZuIiwiRXJyb3IiLCJjbG9zZSIsImF1dG9VbnJlZiIsInVucmVmIiwicHVzaCIsImNsZWFyVGltZW91dEZuIiwiY29ubmVjdCIsIm9ucGluZyIsImJpbmQiLCJvbmRhdGEiLCJvbmVycm9yIiwib25jbG9zZSIsIm9uZGVjb2RlZCIsImRhdGEiLCJhZGQiLCJlIiwicGFja2V0IiwibnNwIiwiYWN0aXZlIiwiX2Rlc3Ryb3kiLCJPYmplY3QiLCJrZXlzIiwiX2Nsb3NlIiwiX3BhY2tldCIsImVuY29kZWRQYWNrZXRzIiwiZW5jb2RlIiwiaSIsIndyaXRlIiwib3B0aW9ucyIsImZvckVhY2giLCJzdWJEZXN0cm95IiwiZGVzdHJveSIsImRpc2Nvbm5lY3QiLCJyZWFzb24iLCJkZXNjcmlwdGlvbiIsInJlc2V0IiwiZGVsYXkiLCJkdXJhdGlvbiIsIm9ucmVjb25uZWN0IiwiYXR0ZW1wdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/socket.io-client/build/esm-debug/manager.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/socket.io-client/build/esm-debug/on.js":
/*!**************************************************************!*\
  !*** ../node_modules/socket.io-client/build/esm-debug/on.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   on: () => (/* binding */ on)\n/* harmony export */ });\nfunction on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtLWRlYnVnL29uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxTQUFTQSxHQUFHQyxHQUFHLEVBQUVDLEVBQUUsRUFBRUMsRUFBRTtJQUMxQkYsSUFBSUQsRUFBRSxDQUFDRSxJQUFJQztJQUNYLE9BQU8sU0FBU0M7UUFDWkgsSUFBSUksR0FBRyxDQUFDSCxJQUFJQztJQUNoQjtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtLWRlYnVnL29uLmpzP2RjZDYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG9uKG9iaiwgZXYsIGZuKSB7XHJcbiAgICBvYmoub24oZXYsIGZuKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xyXG4gICAgICAgIG9iai5vZmYoZXYsIGZuKTtcclxuICAgIH07XHJcbn1cclxuIl0sIm5hbWVzIjpbIm9uIiwib2JqIiwiZXYiLCJmbiIsInN1YkRlc3Ryb3kiLCJvZmYiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/socket.io-client/build/esm-debug/on.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/socket.io-client/build/esm-debug/socket.js":
/*!******************************************************************!*\
  !*** ../node_modules/socket.io-client/build/esm-debug/socket.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Socket: () => (/* binding */ Socket)\n/* harmony export */ });\n/* harmony import */ var socket_io_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-parser */ \"(ssr)/../node_modules/socket.io-parser/build/esm-debug/index.js\");\n/* harmony import */ var _on_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./on.js */ \"(ssr)/../node_modules/socket.io-client/build/esm-debug/on.js\");\n/* harmony import */ var _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @socket.io/component-emitter */ \"(ssr)/../node_modules/@socket.io/component-emitter/index.mjs\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! debug */ \"(ssr)/../node_modules/debug/src/index.js\");\n\n\n\n // debug()\nconst debug = debug__WEBPACK_IMPORTED_MODULE_3__(\"socket.io-client:socket\"); // debug()\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */ const RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1\n});\n/**\r\n * A Socket is the fundamental class for interacting with the server.\r\n *\r\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\r\n *\r\n * @example\r\n * const socket = io();\r\n *\r\n * socket.on(\"connect\", () => {\r\n *   console.log(\"connected\");\r\n * });\r\n *\r\n * // send an event to the server\r\n * socket.emit(\"foo\", \"bar\");\r\n *\r\n * socket.on(\"foobar\", () => {\r\n *   // an event was received from the server\r\n * });\r\n *\r\n * // upon disconnection\r\n * socket.on(\"disconnect\", (reason) => {\r\n *   console.log(`disconnected due to ${reason}`);\r\n * });\r\n */ class Socket extends _socket_io_component_emitter__WEBPACK_IMPORTED_MODULE_2__.Emitter {\n    /**\r\n     * `Socket` constructor.\r\n     */ constructor(io, nsp, opts){\n        super();\n        /**\r\n         * Whether the socket is currently connected to the server.\r\n         *\r\n         * @example\r\n         * const socket = io();\r\n         *\r\n         * socket.on(\"connect\", () => {\r\n         *   console.log(socket.connected); // true\r\n         * });\r\n         *\r\n         * socket.on(\"disconnect\", () => {\r\n         *   console.log(socket.connected); // false\r\n         * });\r\n         */ this.connected = false;\n        /**\r\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\r\n         * be transmitted by the server.\r\n         */ this.recovered = false;\n        /**\r\n         * Buffer for packets received before the CONNECT packet\r\n         */ this.receiveBuffer = [];\n        /**\r\n         * Buffer for packets that will be sent once the socket is connected\r\n         */ this.sendBuffer = [];\n        /**\r\n         * The queue of packets to be sent with retry in case of failure.\r\n         *\r\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\r\n         * @private\r\n         */ this._queue = [];\n        /**\r\n         * A sequence to generate the ID of the {@link QueuedPacket}.\r\n         * @private\r\n         */ this._queueSeq = 0;\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect) this.open();\n    }\n    /**\r\n     * Whether the socket is currently disconnected\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"connect\", () => {\r\n     *   console.log(socket.disconnected); // false\r\n     * });\r\n     *\r\n     * socket.on(\"disconnect\", () => {\r\n     *   console.log(socket.disconnected); // true\r\n     * });\r\n     */ get disconnected() {\n        return !this.connected;\n    }\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */ subEvents() {\n        if (this.subs) return;\n        const io = this.io;\n        this.subs = [\n            (0,_on_js__WEBPACK_IMPORTED_MODULE_1__.on)(io, \"open\", this.onopen.bind(this)),\n            (0,_on_js__WEBPACK_IMPORTED_MODULE_1__.on)(io, \"packet\", this.onpacket.bind(this)),\n            (0,_on_js__WEBPACK_IMPORTED_MODULE_1__.on)(io, \"error\", this.onerror.bind(this)),\n            (0,_on_js__WEBPACK_IMPORTED_MODULE_1__.on)(io, \"close\", this.onclose.bind(this))\n        ];\n    }\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * console.log(socket.active); // true\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   if (reason === \"io server disconnect\") {\r\n     *     // the disconnection was initiated by the server, you need to manually reconnect\r\n     *     console.log(socket.active); // false\r\n     *   }\r\n     *   // else the socket will automatically try to reconnect\r\n     *   console.log(socket.active); // true\r\n     * });\r\n     */ get active() {\n        return !!this.subs;\n    }\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @example\r\n     * const socket = io({\r\n     *   autoConnect: false\r\n     * });\r\n     *\r\n     * socket.connect();\r\n     */ connect() {\n        if (this.connected) return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState) this.onopen();\n        return this;\n    }\n    /**\r\n     * Alias for {@link connect()}.\r\n     */ open() {\n        return this.connect();\n    }\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * This method mimics the WebSocket.send() method.\r\n     *\r\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\r\n     *\r\n     * @example\r\n     * socket.send(\"hello\");\r\n     *\r\n     * // this is equivalent to\r\n     * socket.emit(\"message\", \"hello\");\r\n     *\r\n     * @return self\r\n     */ send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @example\r\n     * socket.emit(\"hello\", \"world\");\r\n     *\r\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\r\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\r\n     *\r\n     * // with an acknowledgement from the server\r\n     * socket.emit(\"hello\", \"world\", (val) => {\r\n     *   // ...\r\n     * });\r\n     *\r\n     * @return self\r\n     */ emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.EVENT,\n            data: args\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            debug(\"emitting packet with ack id %d\", id);\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n            debug(\"discard packet as the transport is not currently writable\");\n        } else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        } else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\r\n     * @private\r\n     */ _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(()=>{\n            delete this.acks[id];\n            for(let i = 0; i < this.sendBuffer.length; i++){\n                if (this.sendBuffer[i].id === id) {\n                    debug(\"removing packet with ack id %d from the buffer\", id);\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args)=>{\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [\n                null,\n                ...args\n            ]);\n        };\n    }\n    /**\r\n     * Emits an event and waits for an acknowledgement\r\n     *\r\n     * @example\r\n     * // without timeout\r\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\r\n     *\r\n     * // with a specific timeout\r\n     * try {\r\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\r\n     * } catch (err) {\r\n     *   // the server did not acknowledge the event in the given delay\r\n     * }\r\n     *\r\n     * @return a Promise that will be fulfilled when the server acknowledges the event\r\n     */ emitWithAck(ev, ...args) {\n        // the timeout flag is optional\n        const withErr = this.flags.timeout !== undefined || this._opts.ackTimeout !== undefined;\n        return new Promise((resolve, reject)=>{\n            args.push((arg1, arg2)=>{\n                if (withErr) {\n                    return arg1 ? reject(arg1) : resolve(arg2);\n                } else {\n                    return resolve(arg1);\n                }\n            });\n            this.emit(ev, ...args);\n        });\n    }\n    /**\r\n     * Add the packet to the queue.\r\n     * @param args\r\n     * @private\r\n     */ _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({\n                fromQueue: true\n            }, this.flags)\n        };\n        args.push((err, ...responseArgs)=>{\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    debug(\"packet [%d] is discarded after %d tries\", packet.id, packet.tryCount);\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            } else {\n                debug(\"packet [%d] was successfully sent\", packet.id);\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\r\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\r\n     * @param force - whether to resend a packet that has not been acknowledged yet\r\n     *\r\n     * @private\r\n     */ _drainQueue(force = false) {\n        debug(\"draining queue\");\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            debug(\"packet [%d] has already been sent and is waiting for an ack\", packet.id);\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        debug(\"sending packet [%d] (try n\\xb0%d)\", packet.id, packet.tryCount);\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */ packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */ onopen() {\n        debug(\"transport is open - connecting\");\n        if (typeof this.auth == \"function\") {\n            this.auth((data)=>{\n                this._sendConnectPacket(data);\n            });\n        } else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\r\n     * Sends a CONNECT packet to initiate the Socket.IO session.\r\n     *\r\n     * @param data\r\n     * @private\r\n     */ _sendConnectPacket(data) {\n        this.packet({\n            type: socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.CONNECT,\n            data: this._pid ? Object.assign({\n                pid: this._pid,\n                offset: this._lastOffset\n            }, data) : data\n        });\n    }\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */ onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @param description\r\n     * @private\r\n     */ onclose(reason, description) {\n        debug(\"close (%s)\", reason);\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */ onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace) return;\n        switch(packet.type){\n            case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                } else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.EVENT:\n            case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.ACK:\n            case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */ onevent(packet) {\n        const args = packet.data || [];\n        debug(\"emitting event %j\", args);\n        if (null != packet.id) {\n            debug(\"attaching ack callback to event\");\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        } else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners){\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */ ack(id) {\n        const self = this;\n        let sent = false;\n        return function(...args) {\n            // prevent double callbacks\n            if (sent) return;\n            sent = true;\n            debug(\"sending ack %j\", args);\n            self.packet({\n                type: socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.ACK,\n                id: id,\n                data: args\n            });\n        };\n    }\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */ onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        } else {\n            debug(\"bad ack %s\", packet.id);\n        }\n    }\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */ onconnect(id, pid) {\n        debug(\"socket connected with id %s\", id);\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */ emitBuffered() {\n        this.receiveBuffer.forEach((args)=>this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet)=>{\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */ ondisconnect() {\n        debug(\"server disconnect (%s)\", this.nsp);\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */ destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy)=>subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\r\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\r\n     *\r\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\r\n     *\r\n     * @example\r\n     * const socket = io();\r\n     *\r\n     * socket.on(\"disconnect\", (reason) => {\r\n     *   // console.log(reason); prints \"io client disconnect\"\r\n     * });\r\n     *\r\n     * socket.disconnect();\r\n     *\r\n     * @return self\r\n     */ disconnect() {\n        if (this.connected) {\n            debug(\"performing disconnect (%s)\", this.nsp);\n            this.packet({\n                type: socket_io_parser__WEBPACK_IMPORTED_MODULE_0__.PacketType.DISCONNECT\n            });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\r\n     * Alias for {@link disconnect()}.\r\n     *\r\n     * @return self\r\n     */ close() {\n        return this.disconnect();\n    }\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @example\r\n     * socket.compress(false).emit(\"hello\");\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     */ compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @example\r\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\r\n     *\r\n     * @returns self\r\n     */ get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * @example\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     *\r\n     * @returns self\r\n     */ timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @example\r\n     * socket.onAny((event, ...args) => {\r\n     *   console.log(`got ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */ onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @example\r\n     * socket.prependAny((event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */ prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`got event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAny(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAny(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAny();\r\n     *\r\n     * @param listener\r\n     */ offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for(let i = 0; i < listeners.length; i++){\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        } else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */ listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.onAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */ onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * Note: acknowledgements sent to the server are not included.\r\n     *\r\n     * @example\r\n     * socket.prependAnyOutgoing((event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * });\r\n     *\r\n     * @param listener\r\n     */ prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @example\r\n     * const catchAllListener = (event, ...args) => {\r\n     *   console.log(`sent event ${event}`);\r\n     * }\r\n     *\r\n     * socket.onAnyOutgoing(catchAllListener);\r\n     *\r\n     * // remove a specific listener\r\n     * socket.offAnyOutgoing(catchAllListener);\r\n     *\r\n     * // or remove all listeners\r\n     * socket.offAnyOutgoing();\r\n     *\r\n     * @param [listener] - the catch-all listener (optional)\r\n     */ offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for(let i = 0; i < listeners.length; i++){\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        } else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     */ listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\r\n     * Notify the listeners for each packet sent\r\n     *\r\n     * @param packet\r\n     *\r\n     * @private\r\n     */ notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners){\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/socket.io-client/build/esm-debug/socket.js\n");

/***/ }),

/***/ "(ssr)/../node_modules/socket.io-client/build/esm-debug/url.js":
/*!***************************************************************!*\
  !*** ../node_modules/socket.io-client/build/esm-debug/url.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   url: () => (/* binding */ url)\n/* harmony export */ });\n/* harmony import */ var engine_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! engine.io-client */ \"(ssr)/../node_modules/engine.io-client/build/esm-debug/index.js\");\n/* harmony import */ var debug__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! debug */ \"(ssr)/../node_modules/debug/src/index.js\");\n\n // debug()\nconst debug = debug__WEBPACK_IMPORTED_MODULE_1__(\"socket.io-client:url\"); // debug()\n/**\r\n * URL parser.\r\n *\r\n * @param uri - url\r\n * @param path - the request path of the connection\r\n * @param loc - An object meant to mimic window.location.\r\n *        Defaults to window.location.\r\n * @public\r\n */ function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || typeof location !== \"undefined\" && location;\n    if (null == uri) uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            } else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            debug(\"protocol-less url %s\", uri);\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            } else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        debug(\"parse %s\", uri);\n        obj = (0,engine_io_client__WEBPACK_IMPORTED_MODULE_0__.parse)(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        } else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href = obj.protocol + \"://\" + host + (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvZXNtLWRlYnVnL3VybC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBeUM7QUFDVCxDQUFDLFVBQVU7QUFDM0MsTUFBTUUsUUFBUUQsa0NBQVdBLENBQUMseUJBQXlCLFVBQVU7QUFDN0Q7Ozs7Ozs7O0NBUUMsR0FDTSxTQUFTRSxJQUFJQyxHQUFHLEVBQUVDLE9BQU8sRUFBRSxFQUFFQyxHQUFHO0lBQ25DLElBQUlDLE1BQU1IO0lBQ1YsNkJBQTZCO0lBQzdCRSxNQUFNQSxPQUFRLE9BQU9FLGFBQWEsZUFBZUE7SUFDakQsSUFBSSxRQUFRSixLQUNSQSxNQUFNRSxJQUFJRyxRQUFRLEdBQUcsT0FBT0gsSUFBSUksSUFBSTtJQUN4Qyx3QkFBd0I7SUFDeEIsSUFBSSxPQUFPTixRQUFRLFVBQVU7UUFDekIsSUFBSSxRQUFRQSxJQUFJTyxNQUFNLENBQUMsSUFBSTtZQUN2QixJQUFJLFFBQVFQLElBQUlPLE1BQU0sQ0FBQyxJQUFJO2dCQUN2QlAsTUFBTUUsSUFBSUcsUUFBUSxHQUFHTDtZQUN6QixPQUNLO2dCQUNEQSxNQUFNRSxJQUFJSSxJQUFJLEdBQUdOO1lBQ3JCO1FBQ0o7UUFDQSxJQUFJLENBQUMsc0JBQXNCUSxJQUFJLENBQUNSLE1BQU07WUFDbENGLE1BQU0sd0JBQXdCRTtZQUM5QixJQUFJLGdCQUFnQixPQUFPRSxLQUFLO2dCQUM1QkYsTUFBTUUsSUFBSUcsUUFBUSxHQUFHLE9BQU9MO1lBQ2hDLE9BQ0s7Z0JBQ0RBLE1BQU0sYUFBYUE7WUFDdkI7UUFDSjtRQUNBLFFBQVE7UUFDUkYsTUFBTSxZQUFZRTtRQUNsQkcsTUFBTVAsdURBQUtBLENBQUNJO0lBQ2hCO0lBQ0EsNERBQTREO0lBQzVELElBQUksQ0FBQ0csSUFBSU0sSUFBSSxFQUFFO1FBQ1gsSUFBSSxjQUFjRCxJQUFJLENBQUNMLElBQUlFLFFBQVEsR0FBRztZQUNsQ0YsSUFBSU0sSUFBSSxHQUFHO1FBQ2YsT0FDSyxJQUFJLGVBQWVELElBQUksQ0FBQ0wsSUFBSUUsUUFBUSxHQUFHO1lBQ3hDRixJQUFJTSxJQUFJLEdBQUc7UUFDZjtJQUNKO0lBQ0FOLElBQUlGLElBQUksR0FBR0UsSUFBSUYsSUFBSSxJQUFJO0lBQ3ZCLE1BQU1TLE9BQU9QLElBQUlHLElBQUksQ0FBQ0ssT0FBTyxDQUFDLFNBQVMsQ0FBQztJQUN4QyxNQUFNTCxPQUFPSSxPQUFPLE1BQU1QLElBQUlHLElBQUksR0FBRyxNQUFNSCxJQUFJRyxJQUFJO0lBQ25ELG1CQUFtQjtJQUNuQkgsSUFBSVMsRUFBRSxHQUFHVCxJQUFJRSxRQUFRLEdBQUcsUUFBUUMsT0FBTyxNQUFNSCxJQUFJTSxJQUFJLEdBQUdSO0lBQ3hELGNBQWM7SUFDZEUsSUFBSVUsSUFBSSxHQUNKVixJQUFJRSxRQUFRLEdBQ1IsUUFDQUMsT0FDQ0osQ0FBQUEsT0FBT0EsSUFBSU8sSUFBSSxLQUFLTixJQUFJTSxJQUFJLEdBQUcsS0FBSyxNQUFNTixJQUFJTSxJQUFJO0lBQzNELE9BQU9OO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC9lc20tZGVidWcvdXJsLmpzPzRjNWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2UgfSBmcm9tIFwiZW5naW5lLmlvLWNsaWVudFwiO1xyXG5pbXBvcnQgZGVidWdNb2R1bGUgZnJvbSBcImRlYnVnXCI7IC8vIGRlYnVnKClcclxuY29uc3QgZGVidWcgPSBkZWJ1Z01vZHVsZShcInNvY2tldC5pby1jbGllbnQ6dXJsXCIpOyAvLyBkZWJ1ZygpXHJcbi8qKlxyXG4gKiBVUkwgcGFyc2VyLlxyXG4gKlxyXG4gKiBAcGFyYW0gdXJpIC0gdXJsXHJcbiAqIEBwYXJhbSBwYXRoIC0gdGhlIHJlcXVlc3QgcGF0aCBvZiB0aGUgY29ubmVjdGlvblxyXG4gKiBAcGFyYW0gbG9jIC0gQW4gb2JqZWN0IG1lYW50IHRvIG1pbWljIHdpbmRvdy5sb2NhdGlvbi5cclxuICogICAgICAgIERlZmF1bHRzIHRvIHdpbmRvdy5sb2NhdGlvbi5cclxuICogQHB1YmxpY1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHVybCh1cmksIHBhdGggPSBcIlwiLCBsb2MpIHtcclxuICAgIGxldCBvYmogPSB1cmk7XHJcbiAgICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxyXG4gICAgbG9jID0gbG9jIHx8ICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiYgbG9jYXRpb24pO1xyXG4gICAgaWYgKG51bGwgPT0gdXJpKVxyXG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIGxvYy5ob3N0O1xyXG4gICAgLy8gcmVsYXRpdmUgcGF0aCBzdXBwb3J0XHJcbiAgICBpZiAodHlwZW9mIHVyaSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgIGlmIChcIi9cIiA9PT0gdXJpLmNoYXJBdCgwKSkge1xyXG4gICAgICAgICAgICBpZiAoXCIvXCIgPT09IHVyaS5jaGFyQXQoMSkpIHtcclxuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIHVyaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5ob3N0ICsgdXJpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghL14oaHR0cHM/fHdzcz8pOlxcL1xcLy8udGVzdCh1cmkpKSB7XHJcbiAgICAgICAgICAgIGRlYnVnKFwicHJvdG9jb2wtbGVzcyB1cmwgJXNcIiwgdXJpKTtcclxuICAgICAgICAgICAgaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZiBsb2MpIHtcclxuICAgICAgICAgICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIHVyaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHVyaSA9IFwiaHR0cHM6Ly9cIiArIHVyaTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwYXJzZVxyXG4gICAgICAgIGRlYnVnKFwicGFyc2UgJXNcIiwgdXJpKTtcclxuICAgICAgICBvYmogPSBwYXJzZSh1cmkpO1xyXG4gICAgfVxyXG4gICAgLy8gbWFrZSBzdXJlIHdlIHRyZWF0IGBsb2NhbGhvc3Q6ODBgIGFuZCBgbG9jYWxob3N0YCBlcXVhbGx5XHJcbiAgICBpZiAoIW9iai5wb3J0KSB7XHJcbiAgICAgICAgaWYgKC9eKGh0dHB8d3MpJC8udGVzdChvYmoucHJvdG9jb2wpKSB7XHJcbiAgICAgICAgICAgIG9iai5wb3J0ID0gXCI4MFwiO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICgvXihodHRwfHdzKXMkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcclxuICAgICAgICAgICAgb2JqLnBvcnQgPSBcIjQ0M1wiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG9iai5wYXRoID0gb2JqLnBhdGggfHwgXCIvXCI7XHJcbiAgICBjb25zdCBpcHY2ID0gb2JqLmhvc3QuaW5kZXhPZihcIjpcIikgIT09IC0xO1xyXG4gICAgY29uc3QgaG9zdCA9IGlwdjYgPyBcIltcIiArIG9iai5ob3N0ICsgXCJdXCIgOiBvYmouaG9zdDtcclxuICAgIC8vIGRlZmluZSB1bmlxdWUgaWRcclxuICAgIG9iai5pZCA9IG9iai5wcm90b2NvbCArIFwiOi8vXCIgKyBob3N0ICsgXCI6XCIgKyBvYmoucG9ydCArIHBhdGg7XHJcbiAgICAvLyBkZWZpbmUgaHJlZlxyXG4gICAgb2JqLmhyZWYgPVxyXG4gICAgICAgIG9iai5wcm90b2NvbCArXHJcbiAgICAgICAgICAgIFwiOi8vXCIgK1xyXG4gICAgICAgICAgICBob3N0ICtcclxuICAgICAgICAgICAgKGxvYyAmJiBsb2MucG9ydCA9PT0gb2JqLnBvcnQgPyBcIlwiIDogXCI6XCIgKyBvYmoucG9ydCk7XHJcbiAgICByZXR1cm4gb2JqO1xyXG59XHJcbiJdLCJuYW1lcyI6WyJwYXJzZSIsImRlYnVnTW9kdWxlIiwiZGVidWciLCJ1cmwiLCJ1cmkiLCJwYXRoIiwibG9jIiwib2JqIiwibG9jYXRpb24iLCJwcm90b2NvbCIsImhvc3QiLCJjaGFyQXQiLCJ0ZXN0IiwicG9ydCIsImlwdjYiLCJpbmRleE9mIiwiaWQiLCJocmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/socket.io-client/build/esm-debug/url.js\n");

/***/ })

};
;